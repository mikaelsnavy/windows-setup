# Path to boxstarter script that can be used to clean Windows
$repoUrl = "https://github.com/mikaelsnavy/windows-setup.git"
$cleanupScriptRepoZip = "https://github.com/Disassembler0/Win10-Initial-Setup-Script/archive/3.10.zip"
$cleanupScriptConfig = "https://raw.githubusercontent.com/mikaelweave/windows-setup/master/cleanupWindows10Config.preset"

function Ask-Command {
    <#
    .SYNOPSIS
    Yes or no prompt to run a command
    .DESCRIPTION
    Provides the user with a yes or no prompt to do something, if yes run a command
    .EXAMPLE
    Give an example of how to use it
    .PARAMETER prompt
    What are we asking the user to do?
    .PARAMETER command
    Command to execute if yes 
    #>
    [CmdletBinding()]
    param
    (
      [Parameter(Mandatory=$True)]
      [string]$prompt,
      [Parameter(Mandatory=$True)]
      [string]$command
    )

    process {
        $answer = Read-Host $($prompt + " (Yes (-y) or No)")
        while("yes","no","-y" -notcontains $answer)
        {
            $answer = Read-Host "Yes or No"
        }
        if ($answer -ne "no") {
            Invoke-Expression $command
        }
    }
}

function CleanUpWindows {
    $oldPath = $(Get-Location).Path
    cd ~/Downloads/

    Invoke-WebRequest -Uri $cleanupScriptRepoZip -OutFile CleanUpWindows.zip -UseBasicParsing
    Expand-Archive -LiteralPath CleanupWindows.zip -Force
    cd CleanupWindows/Win10-Initial-Setup-Script-*/
    Invoke-WebRequest -Uri $cleanupScriptConfig -OutFile cleanupScriptConfig.preset -UseBasicParsing

    $argumentList = @("-include", "Win10.psm1", "-preset", "cleanupScriptConfig.preset")
    $scriptPath = $(Get-Location).Path + "\Win10.ps1"
    Invoke-Expression "& `"$scriptPath`" $argumentList"

    cd $oldPath
}

######################################################
## Windows Cleanup
######################################################
Write-Host "###############################################" -ForegroundColor White;
Write-Host "Windows Cleanup" -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
Ask-Command "Do you want to cleanup Windows?" CleanUpWindows
Write-Host ""
Update-SessionEnvironment

######################################################
# INSTALL APPS THROUGH CHOCO
######################################################
Write-Host "###############################################" -ForegroundColor White;
Write-Host "Installing system tools..." -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
cinst -y greenshot
cinst -y ditto
cinst -y 7zip
cinst -y zoomit
cinst -y autohotkey
cinst -y Microsoft-Windows-Subsystem-Linux -source windowsfeatures
cinst -y Microsoft-Hyper-V-All -source windowsFeatures
Write-Host ""
Update-SessionEnvironment

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Installing Developer Tools..." -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
cinst -y microsoft-windows-terminal
cinst -y nodejs.install
Update-SessionEnvironment
npm install -g npm-windows-upgrade
cinst -y curl
cinst -y dotnetcore-sdk
cinst -y python
cinst -y docker-desktop
cinst -y docker-compose
cinst -y microsoftazurestorageexplorer
cinst -y azure-cli
cinst -y azure-data-studio
cinst -y vscode
cinst -y git.install
Write-Host ""
Update-SessionEnvironment

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Installing Productivity Tools..." -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
cinst -y office365proplus
cinst -y microsoft-teams.install
cinst -y GoogleChrome
cinst -y microsoft-edge
Write-Host ""
Update-SessionEnvironment

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Installing Visual Studio..." -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
cinst -y visualstudio2019enterprise
cinst -y visualstudio2019-workload-netcoretools
cinst -y visualstudio2019-workload-netweb
cinst -y visualstudio2019-workload-node
Write-Host ""
Update-SessionEnvironment

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Configuring Computer..." -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
Set-TaskbarSmall
Set-ExplorerOptions -showHidenFilesFoldersDrives -showProtectedOSFiles -showFileExtensions
# Pin items to the task bar
Install-ChocolateyPinnedTaskBarItem "${env:ProgramFiles(x86)}\Google\Chrome\Application\chrome.exe"
Install-ChocolateyPinnedTaskBarItem "${env:LOCALAPPDATA}\Microsoft\Teams\current\Teams.exe"
Install-ChocolateyPinnedTaskBarItem "${env:ProgramFiles}\Microsoft VS Code\Code.exe"
# Clone git repo with extra setup files
$gitCloneRoot = "$env:USERPROFILE\Downloads\windows-setup\"
git clone $repoUrl $gitCloneRoot

# Git config
$answer = Read-Host "Do you want to setup your git info? (Yes or No)"
while("yes", "no" -notcontains $answer)
{
    $answer = Read-Host "Yes or No"
}
if ($answer -eq "yes") {
    $name = Read-Host 'What name do you want to use for git?'
    $email = Read-Host 'What email do you want to use for git?'
    git config --global user.name $name
    git config --global user.email $email
    Write-Host 'Done!!!';
}
Write-Host 'Done!!!';
Write-Host ""

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Installing AutoHotKey customization..." -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
# Startup script setup
New-Item -ItemType Directory -Force -Path "$env:USERPROFILE\bin"
Copy-Item "$gitCloneRoot\startup.cmd" -Destination "$env:USERPROFILE\bin\" -Force
# AutoHotKey setup :) 
Copy-Item "$gitCloneRoot\AutoHotKey" -Destination "$env:USERPROFILE\bin\" -Recurse -Force

# Make the startup script...well..startup automatically
$WScriptShell = New-Object -ComObject WScript.Shell
$Shortcut = $WScriptShell.CreateShortcut("$env:USERPROFILE\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup\startup.cmd.lnk")
$Shortcut.TargetPath = "$env:USERPROFILE\bin\startup.cmd"
$Shortcut.Save()
Write-Host 'Done!!!';
Write-Host ""

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Install setting sync for VSCode..." -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
#Write-Host "Launching VS Code to create temp files. Please close it and press any key to continue..."
#& "${env:ProgramFiles}\Microsoft VS Code\Code.exe" > $null
#$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
code --install-extension Shan.code-settings-sync
Copy-Item $gitCloneRoot\vscode-settings.json -Destination $env:USERPROFILE\AppData\Roaming\Code\User\settings.json -Force
Write-Host 'Done!!!';
Write-Host ""

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Installing Notion" -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
Write-Host "Popping up Edge to download/install notion";
$url = "https://desktop-release.notion-static.com/Notion%20Setup%202.0.8.exe"
$outpath = "$env:USERPROFILE\Downloads\Notion Setup.exe"
Invoke-WebRequest -Uri $url -OutFile $outpath
Start-Process -Filepath "$env:USERPROFILE\Downloads\Notion Setup.exe"
Write-Host -NoNewLine 'Press any key to continue once done...';
$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');
Write-Host ""
Write-Host ""

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Installing Ubuntu WSL" -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
.\ubuntu-wsl-setup.ps1

Write-Host "###############################################" -ForegroundColor White;
Write-Host "Installing Arch WSL" -ForegroundColor White;
Write-Host "###############################################" -ForegroundColor White;
.\arch-wsl-setup.ps1

# Let's get Updates, too
Install-WindowsUpdate -acceptEula

Write-Host "Script is complete! You should be (mostly) setup" -ForegroundColor Green;
Write-Host -NoNewLine 'Press any key to exit...' -ForegroundColor Green;
$null = $Host.UI.RawUI.ReadKey('NoEcho,IncludeKeyDown');